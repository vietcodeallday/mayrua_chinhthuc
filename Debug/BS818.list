
BS818.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000191c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001a28  08001a28  00011a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a74  08001a74  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001a74  08001a74  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a74  08001a74  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a74  08001a74  00011a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a78  08001a78  00011a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000010  08001a8c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001a8c  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   000039e2  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001499  00000000  00000000  00023a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000518  00000000  00000000  00024ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003a8  00000000  00000000  00025410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015a5e  00000000  00000000  000257b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006516  00000000  00000000  0003b216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079ec4  00000000  00000000  0004172c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000011b4  00000000  00000000  000bb5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000bc7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a10 	.word	0x08001a10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001a10 	.word	0x08001a10

0800014c <Bs81x_Init>:
	return Bs81X_Data;	
}
//###################################################################################################################
#if	(_BS81X_USE_FREERTOS==0)
void	Bs81x_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_BS81X_CLOCK_GPIO_Port,_BS81X_CLOCK_Pin,GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	2140      	movs	r1, #64	; 0x40
 8000154:	4808      	ldr	r0, [pc, #32]	; (8000178 <Bs81x_Init+0x2c>)
 8000156:	f001 f838 	bl	80011ca <HAL_GPIO_WritePin>
	while(HAL_GetTick() < 1000)	// need 1 second for calibration
 800015a:	e002      	b.n	8000162 <Bs81x_Init+0x16>
		_BS81X_DELAY(1);
 800015c:	2001      	movs	r0, #1
 800015e:	f000 fd99 	bl	8000c94 <HAL_Delay>
	while(HAL_GetTick() < 1000)	// need 1 second for calibration
 8000162:	f000 fd8d 	bl	8000c80 <HAL_GetTick>
 8000166:	4603      	mov	r3, r0
 8000168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800016c:	d3f6      	bcc.n	800015c <Bs81x_Init+0x10>
	Bs81x.LastKey=0;
 800016e:	4b03      	ldr	r3, [pc, #12]	; (800017c <Bs81x_Init+0x30>)
 8000170:	2200      	movs	r2, #0
 8000172:	705a      	strb	r2, [r3, #1]
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010800 	.word	0x40010800
 800017c:	2000002c 	.word	0x2000002c

08000180 <TM1638_StartComunication>:
 ==================================================================================
 */

static inline void
TM1638_StartComunication(TM1638_Handler_t *Handler)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
  Handler->StbWrite(0);
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	69db      	ldr	r3, [r3, #28]
 800018c:	2000      	movs	r0, #0
 800018e:	4798      	blx	r3
}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <TM1638_StopComunication>:

static inline void
TM1638_StopComunication(TM1638_Handler_t *Handler)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
  Handler->StbWrite(1);
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	69db      	ldr	r3, [r3, #28]
 80001a4:	2001      	movs	r0, #1
 80001a6:	4798      	blx	r3
}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}

080001b0 <TM1638_WriteBytes>:

static void
TM1638_WriteBytes(TM1638_Handler_t *Handler,
                  const uint8_t *Data, uint8_t NumOfBytes)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	60f8      	str	r0, [r7, #12]
 80001b8:	60b9      	str	r1, [r7, #8]
 80001ba:	4613      	mov	r3, r2
 80001bc:	71fb      	strb	r3, [r7, #7]
  uint8_t i, j, Buff;

  Handler->DioConfigOut();
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	689b      	ldr	r3, [r3, #8]
 80001c2:	4798      	blx	r3

  for (j = 0; j < NumOfBytes; j++)
 80001c4:	2300      	movs	r3, #0
 80001c6:	75bb      	strb	r3, [r7, #22]
 80001c8:	e02b      	b.n	8000222 <TM1638_WriteBytes+0x72>
  {
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 80001ca:	2300      	movs	r3, #0
 80001cc:	75fb      	strb	r3, [r7, #23]
 80001ce:	7dbb      	ldrb	r3, [r7, #22]
 80001d0:	68ba      	ldr	r2, [r7, #8]
 80001d2:	4413      	add	r3, r2
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	757b      	strb	r3, [r7, #21]
 80001d8:	e01d      	b.n	8000216 <TM1638_WriteBytes+0x66>
    {
      Handler->ClkWrite(0);
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	699b      	ldr	r3, [r3, #24]
 80001de:	2000      	movs	r0, #0
 80001e0:	4798      	blx	r3
      Handler->DelayUs(1);
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	6a1b      	ldr	r3, [r3, #32]
 80001e6:	2001      	movs	r0, #1
 80001e8:	4798      	blx	r3
      Handler->DioWrite(Buff & 0x01);
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	691b      	ldr	r3, [r3, #16]
 80001ee:	7d7a      	ldrb	r2, [r7, #21]
 80001f0:	f002 0201 	and.w	r2, r2, #1
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	4610      	mov	r0, r2
 80001f8:	4798      	blx	r3
      Handler->ClkWrite(1);
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	699b      	ldr	r3, [r3, #24]
 80001fe:	2001      	movs	r0, #1
 8000200:	4798      	blx	r3
      Handler->DelayUs(1);
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	6a1b      	ldr	r3, [r3, #32]
 8000206:	2001      	movs	r0, #1
 8000208:	4798      	blx	r3
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 800020a:	7dfb      	ldrb	r3, [r7, #23]
 800020c:	3301      	adds	r3, #1
 800020e:	75fb      	strb	r3, [r7, #23]
 8000210:	7d7b      	ldrb	r3, [r7, #21]
 8000212:	085b      	lsrs	r3, r3, #1
 8000214:	757b      	strb	r3, [r7, #21]
 8000216:	7dfb      	ldrb	r3, [r7, #23]
 8000218:	2b07      	cmp	r3, #7
 800021a:	d9de      	bls.n	80001da <TM1638_WriteBytes+0x2a>
  for (j = 0; j < NumOfBytes; j++)
 800021c:	7dbb      	ldrb	r3, [r7, #22]
 800021e:	3301      	adds	r3, #1
 8000220:	75bb      	strb	r3, [r7, #22]
 8000222:	7dba      	ldrb	r2, [r7, #22]
 8000224:	79fb      	ldrb	r3, [r7, #7]
 8000226:	429a      	cmp	r2, r3
 8000228:	d3cf      	bcc.n	80001ca <TM1638_WriteBytes+0x1a>
    }
  }
}
 800022a:	bf00      	nop
 800022c:	bf00      	nop
 800022e:	3718      	adds	r7, #24
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}

08000234 <TM1638_SetMultipleDisplayRegister>:

static void
TM1638_SetMultipleDisplayRegister(TM1638_Handler_t *Handler,
                                  const uint8_t *DigitData,
                                  uint8_t StartAddr, uint8_t Count)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	4611      	mov	r1, r2
 8000240:	461a      	mov	r2, r3
 8000242:	460b      	mov	r3, r1
 8000244:	71fb      	strb	r3, [r7, #7]
 8000246:	4613      	mov	r3, r2
 8000248:	71bb      	strb	r3, [r7, #6]
  uint8_t Data = DataInstructionSet | WriteDataToRegister |
 800024a:	2340      	movs	r3, #64	; 0x40
 800024c:	75fb      	strb	r3, [r7, #23]
                 AutoAddressAdd | NormalMode;

  TM1638_StartComunication(Handler);
 800024e:	68f8      	ldr	r0, [r7, #12]
 8000250:	f7ff ff96 	bl	8000180 <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 8000254:	f107 0317 	add.w	r3, r7, #23
 8000258:	2201      	movs	r2, #1
 800025a:	4619      	mov	r1, r3
 800025c:	68f8      	ldr	r0, [r7, #12]
 800025e:	f7ff ffa7 	bl	80001b0 <TM1638_WriteBytes>
  TM1638_StopComunication(Handler);
 8000262:	68f8      	ldr	r0, [r7, #12]
 8000264:	f7ff ff98 	bl	8000198 <TM1638_StopComunication>

  Data = AddressInstructionSet | StartAddr;
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800026e:	b2db      	uxtb	r3, r3
 8000270:	75fb      	strb	r3, [r7, #23]

  TM1638_StartComunication(Handler);
 8000272:	68f8      	ldr	r0, [r7, #12]
 8000274:	f7ff ff84 	bl	8000180 <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 8000278:	f107 0317 	add.w	r3, r7, #23
 800027c:	2201      	movs	r2, #1
 800027e:	4619      	mov	r1, r3
 8000280:	68f8      	ldr	r0, [r7, #12]
 8000282:	f7ff ff95 	bl	80001b0 <TM1638_WriteBytes>
  TM1638_WriteBytes(Handler, DigitData, Count);
 8000286:	79bb      	ldrb	r3, [r7, #6]
 8000288:	461a      	mov	r2, r3
 800028a:	68b9      	ldr	r1, [r7, #8]
 800028c:	68f8      	ldr	r0, [r7, #12]
 800028e:	f7ff ff8f 	bl	80001b0 <TM1638_WriteBytes>
  TM1638_StopComunication(Handler);
 8000292:	68f8      	ldr	r0, [r7, #12]
 8000294:	f7ff ff80 	bl	8000198 <TM1638_StopComunication>
}
 8000298:	bf00      	nop
 800029a:	3718      	adds	r7, #24
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <TM1638_Init>:
 * @retval TM1638_Result_t
 *         - TM1638_OK: Operation was successful.
 */
TM1638_Result_t
TM1638_Init(TM1638_Handler_t *Handler, uint8_t Type)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	70fb      	strb	r3, [r7, #3]
  Handler->DisplayType = TM1638DisplayTypeComCathode;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2200      	movs	r2, #0
 80002b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

#if TM1638_CONFIG_SUPPORT_COM_ANODE
  for (uint8_t i = 0; i < 16; i++)
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]
 80002b8:	e008      	b.n	80002cc <TM1638_Init+0x2c>
  {
    Handler->DisplayRegister[i] = 0;
 80002ba:	7bfb      	ldrb	r3, [r7, #15]
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	4413      	add	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  for (uint8_t i = 0; i < 16; i++)
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	3301      	adds	r3, #1
 80002ca:	73fb      	strb	r3, [r7, #15]
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	2b0f      	cmp	r3, #15
 80002d0:	d9f3      	bls.n	80002ba <TM1638_Init+0x1a>
  }
  if (Type == TM1638DisplayTypeComCathode)
 80002d2:	78fb      	ldrb	r3, [r7, #3]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d104      	bne.n	80002e2 <TM1638_Init+0x42>
    Handler->DisplayType = TM1638DisplayTypeComCathode;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80002e0:	e003      	b.n	80002ea <TM1638_Init+0x4a>
  else
    Handler->DisplayType = TM1638DisplayTypeComAnode;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2201      	movs	r2, #1
 80002e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif

  Handler->PlatformInit();
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4798      	blx	r3
  return TM1638_OK;
 80002f0:	2300      	movs	r3, #0
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}

080002fa <TM1638_ConfigDisplay>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_ConfigDisplay(TM1638_Handler_t *Handler,
                     uint8_t Brightness, uint8_t DisplayState)
{
 80002fa:	b580      	push	{r7, lr}
 80002fc:	b084      	sub	sp, #16
 80002fe:	af00      	add	r7, sp, #0
 8000300:	6078      	str	r0, [r7, #4]
 8000302:	460b      	mov	r3, r1
 8000304:	70fb      	strb	r3, [r7, #3]
 8000306:	4613      	mov	r3, r2
 8000308:	70bb      	strb	r3, [r7, #2]
  uint8_t Data = DisplayControlInstructionSet;
 800030a:	2380      	movs	r3, #128	; 0x80
 800030c:	73fb      	strb	r3, [r7, #15]
  Data |= Brightness & 0x07;
 800030e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000312:	f003 0307 	and.w	r3, r3, #7
 8000316:	b25a      	sxtb	r2, r3
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	b25b      	sxtb	r3, r3
 800031c:	4313      	orrs	r3, r2
 800031e:	b25b      	sxtb	r3, r3
 8000320:	b2db      	uxtb	r3, r3
 8000322:	73fb      	strb	r3, [r7, #15]
  Data |= (DisplayState) ? (ShowTurnOn) : (ShowTurnOff);
 8000324:	78bb      	ldrb	r3, [r7, #2]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <TM1638_ConfigDisplay+0x34>
 800032a:	2208      	movs	r2, #8
 800032c:	e000      	b.n	8000330 <TM1638_ConfigDisplay+0x36>
 800032e:	2200      	movs	r2, #0
 8000330:	7bfb      	ldrb	r3, [r7, #15]
 8000332:	b25b      	sxtb	r3, r3
 8000334:	4313      	orrs	r3, r2
 8000336:	b25b      	sxtb	r3, r3
 8000338:	b2db      	uxtb	r3, r3
 800033a:	73fb      	strb	r3, [r7, #15]

  TM1638_StartComunication(Handler);
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f7ff ff1f 	bl	8000180 <TM1638_StartComunication>
  TM1638_WriteBytes(Handler, &Data, 1);
 8000342:	f107 030f 	add.w	r3, r7, #15
 8000346:	2201      	movs	r2, #1
 8000348:	4619      	mov	r1, r3
 800034a:	6878      	ldr	r0, [r7, #4]
 800034c:	f7ff ff30 	bl	80001b0 <TM1638_WriteBytes>
  TM1638_StopComunication(Handler);
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f7ff ff21 	bl	8000198 <TM1638_StopComunication>

  return TM1638_OK;
 8000356:	2300      	movs	r3, #0
}
 8000358:	4618      	mov	r0, r3
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <TM1638_SetMultipleDigit>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_SetMultipleDigit(TM1638_Handler_t *Handler, const uint8_t *DigitData,
                        uint8_t StartAddr, uint8_t Count)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	4611      	mov	r1, r2
 800036c:	461a      	mov	r2, r3
 800036e:	460b      	mov	r3, r1
 8000370:	71fb      	strb	r3, [r7, #7]
 8000372:	4613      	mov	r3, r2
 8000374:	71bb      	strb	r3, [r7, #6]
  uint8_t Shift = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	75fb      	strb	r3, [r7, #23]
  uint8_t DigitDataBuff = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	75bb      	strb	r3, [r7, #22]
  uint8_t i = 0, j = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	757b      	strb	r3, [r7, #21]
 8000382:	2300      	movs	r3, #0
 8000384:	753b      	strb	r3, [r7, #20]

  if (Handler->DisplayType == TM1638DisplayTypeComCathode)
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800038c:	2b00      	cmp	r3, #0
 800038e:	d106      	bne.n	800039e <TM1638_SetMultipleDigit+0x3e>
    TM1638_SetMultipleDisplayRegister(Handler, DigitData, StartAddr, Count);
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	79fa      	ldrb	r2, [r7, #7]
 8000394:	68b9      	ldr	r1, [r7, #8]
 8000396:	68f8      	ldr	r0, [r7, #12]
 8000398:	f7ff ff4c 	bl	8000234 <TM1638_SetMultipleDisplayRegister>
 800039c:	e071      	b.n	8000482 <TM1638_SetMultipleDigit+0x122>
#if (TM1638_CONFIG_SUPPORT_COM_ANODE)
  else
  {
    for (j = 0; j < Count; j++)
 800039e:	2300      	movs	r3, #0
 80003a0:	753b      	strb	r3, [r7, #20]
 80003a2:	e062      	b.n	800046a <TM1638_SetMultipleDigit+0x10a>
    {
      DigitDataBuff = DigitData[j];
 80003a4:	7d3b      	ldrb	r3, [r7, #20]
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	4413      	add	r3, r2
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	75bb      	strb	r3, [r7, #22]

      if ((j + StartAddr) >= 0 && (j + StartAddr) <= 7)
 80003ae:	7d3a      	ldrb	r2, [r7, #20]
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4413      	add	r3, r2
 80003b4:	2b07      	cmp	r3, #7
 80003b6:	dc06      	bgt.n	80003c6 <TM1638_SetMultipleDigit+0x66>
      {
        Shift = j + StartAddr;
 80003b8:	7d3a      	ldrb	r2, [r7, #20]
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	4413      	add	r3, r2
 80003be:	75fb      	strb	r3, [r7, #23]
        i = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	757b      	strb	r3, [r7, #21]
 80003c4:	e04b      	b.n	800045e <TM1638_SetMultipleDigit+0xfe>
      }
      else if ((j + StartAddr) == 8 || (j + StartAddr) == 9)
 80003c6:	7d3a      	ldrb	r2, [r7, #20]
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	4413      	add	r3, r2
 80003cc:	2b08      	cmp	r3, #8
 80003ce:	d004      	beq.n	80003da <TM1638_SetMultipleDigit+0x7a>
 80003d0:	7d3a      	ldrb	r2, [r7, #20]
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	4413      	add	r3, r2
 80003d6:	2b09      	cmp	r3, #9
 80003d8:	d108      	bne.n	80003ec <TM1638_SetMultipleDigit+0x8c>
      {
        Shift = (j + StartAddr) - 8;
 80003da:	7d3a      	ldrb	r2, [r7, #20]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	4413      	add	r3, r2
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	3b08      	subs	r3, #8
 80003e4:	75fb      	strb	r3, [r7, #23]
        i = 1;
 80003e6:	2301      	movs	r3, #1
 80003e8:	757b      	strb	r3, [r7, #21]
 80003ea:	e001      	b.n	80003f0 <TM1638_SetMultipleDigit+0x90>
      }
      else
      {
        i = 16;
 80003ec:	2310      	movs	r3, #16
 80003ee:	757b      	strb	r3, [r7, #21]
      }

      for (; i < 16; i += 2, DigitDataBuff >>= 1)
 80003f0:	e035      	b.n	800045e <TM1638_SetMultipleDigit+0xfe>
      {
        if (DigitDataBuff & 0x01)
 80003f2:	7dbb      	ldrb	r3, [r7, #22]
 80003f4:	f003 0301 	and.w	r3, r3, #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d014      	beq.n	8000426 <TM1638_SetMultipleDigit+0xc6>
          Handler->DisplayRegister[i] |= (1 << Shift);
 80003fc:	7d7b      	ldrb	r3, [r7, #21]
 80003fe:	68fa      	ldr	r2, [r7, #12]
 8000400:	4413      	add	r3, r2
 8000402:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000406:	b25a      	sxtb	r2, r3
 8000408:	7dfb      	ldrb	r3, [r7, #23]
 800040a:	2101      	movs	r1, #1
 800040c:	fa01 f303 	lsl.w	r3, r1, r3
 8000410:	b25b      	sxtb	r3, r3
 8000412:	4313      	orrs	r3, r2
 8000414:	b25a      	sxtb	r2, r3
 8000416:	7d7b      	ldrb	r3, [r7, #21]
 8000418:	b2d1      	uxtb	r1, r2
 800041a:	68fa      	ldr	r2, [r7, #12]
 800041c:	4413      	add	r3, r2
 800041e:	460a      	mov	r2, r1
 8000420:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8000424:	e015      	b.n	8000452 <TM1638_SetMultipleDigit+0xf2>
        else
          Handler->DisplayRegister[i] &= ~(1 << Shift);
 8000426:	7d7b      	ldrb	r3, [r7, #21]
 8000428:	68fa      	ldr	r2, [r7, #12]
 800042a:	4413      	add	r3, r2
 800042c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000430:	b25a      	sxtb	r2, r3
 8000432:	7dfb      	ldrb	r3, [r7, #23]
 8000434:	2101      	movs	r1, #1
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	b25b      	sxtb	r3, r3
 800043c:	43db      	mvns	r3, r3
 800043e:	b25b      	sxtb	r3, r3
 8000440:	4013      	ands	r3, r2
 8000442:	b25a      	sxtb	r2, r3
 8000444:	7d7b      	ldrb	r3, [r7, #21]
 8000446:	b2d1      	uxtb	r1, r2
 8000448:	68fa      	ldr	r2, [r7, #12]
 800044a:	4413      	add	r3, r2
 800044c:	460a      	mov	r2, r1
 800044e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      for (; i < 16; i += 2, DigitDataBuff >>= 1)
 8000452:	7d7b      	ldrb	r3, [r7, #21]
 8000454:	3302      	adds	r3, #2
 8000456:	757b      	strb	r3, [r7, #21]
 8000458:	7dbb      	ldrb	r3, [r7, #22]
 800045a:	085b      	lsrs	r3, r3, #1
 800045c:	75bb      	strb	r3, [r7, #22]
 800045e:	7d7b      	ldrb	r3, [r7, #21]
 8000460:	2b0f      	cmp	r3, #15
 8000462:	d9c6      	bls.n	80003f2 <TM1638_SetMultipleDigit+0x92>
    for (j = 0; j < Count; j++)
 8000464:	7d3b      	ldrb	r3, [r7, #20]
 8000466:	3301      	adds	r3, #1
 8000468:	753b      	strb	r3, [r7, #20]
 800046a:	7d3a      	ldrb	r2, [r7, #20]
 800046c:	79bb      	ldrb	r3, [r7, #6]
 800046e:	429a      	cmp	r2, r3
 8000470:	d398      	bcc.n	80003a4 <TM1638_SetMultipleDigit+0x44>
      }
    }
    TM1638_SetMultipleDisplayRegister(Handler, Handler->DisplayRegister, 0, 16);
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8000478:	2310      	movs	r3, #16
 800047a:	2200      	movs	r2, #0
 800047c:	68f8      	ldr	r0, [r7, #12]
 800047e:	f7ff fed9 	bl	8000234 <TM1638_SetMultipleDisplayRegister>
  }
#endif

  return TM1638_OK;
 8000482:	2300      	movs	r3, #0
}
 8000484:	4618      	mov	r0, r3
 8000486:	3718      	adds	r7, #24
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <TM1638_SetMultipleDigit_HEX>:
 *         - TM1638_OK: Operation was successful
 */
TM1638_Result_t
TM1638_SetMultipleDigit_HEX(TM1638_Handler_t *Handler, const uint8_t *DigitData,
                            uint8_t StartAddr, uint8_t Count)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
 8000492:	60f8      	str	r0, [r7, #12]
 8000494:	60b9      	str	r1, [r7, #8]
 8000496:	4611      	mov	r1, r2
 8000498:	461a      	mov	r2, r3
 800049a:	460b      	mov	r3, r1
 800049c:	71fb      	strb	r3, [r7, #7]
 800049e:	4613      	mov	r3, r2
 80004a0:	71bb      	strb	r3, [r7, #6]
  uint8_t DigitDataHEX[10];
  uint8_t DecimalPoint = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	77bb      	strb	r3, [r7, #30]

  for (uint8_t i = 0; i < Count; i++)
 80004a6:	2300      	movs	r3, #0
 80004a8:	77fb      	strb	r3, [r7, #31]
 80004aa:	e0bf      	b.n	800062c <TM1638_SetMultipleDigit_HEX+0x1a0>
  {
    DecimalPoint = DigitData[i] & 0x80;
 80004ac:	7ffb      	ldrb	r3, [r7, #31]
 80004ae:	68ba      	ldr	r2, [r7, #8]
 80004b0:	4413      	add	r3, r2
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80004b8:	77bb      	strb	r3, [r7, #30]

    if ((DigitData[i] & 0x7F) >= 0 && (DigitData[i] & 0x7F) <= 15)
 80004ba:	7ffb      	ldrb	r3, [r7, #31]
 80004bc:	68ba      	ldr	r2, [r7, #8]
 80004be:	4413      	add	r3, r2
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d110      	bne.n	80004ec <TM1638_SetMultipleDigit_HEX+0x60>
    {
      DigitDataHEX[i] = HexTo7Seg[DigitData[i] & 0x7F] | DecimalPoint;
 80004ca:	7ffb      	ldrb	r3, [r7, #31]
 80004cc:	68ba      	ldr	r2, [r7, #8]
 80004ce:	4413      	add	r3, r2
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004d6:	4a5e      	ldr	r2, [pc, #376]	; (8000650 <TM1638_SetMultipleDigit_HEX+0x1c4>)
 80004d8:	5cd1      	ldrb	r1, [r2, r3]
 80004da:	7ffb      	ldrb	r3, [r7, #31]
 80004dc:	7fba      	ldrb	r2, [r7, #30]
 80004de:	430a      	orrs	r2, r1
 80004e0:	b2d2      	uxtb	r2, r2
 80004e2:	3320      	adds	r3, #32
 80004e4:	443b      	add	r3, r7
 80004e6:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80004ea:	e09c      	b.n	8000626 <TM1638_SetMultipleDigit_HEX+0x19a>
    }
    else
    {
      switch (DigitData[i] & 0x7F)
 80004ec:	7ffb      	ldrb	r3, [r7, #31]
 80004ee:	68ba      	ldr	r2, [r7, #8]
 80004f0:	4413      	add	r3, r2
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004f8:	3b41      	subs	r3, #65	; 0x41
 80004fa:	2b25      	cmp	r3, #37	; 0x25
 80004fc:	f200 808c 	bhi.w	8000618 <TM1638_SetMultipleDigit_HEX+0x18c>
 8000500:	a201      	add	r2, pc, #4	; (adr r2, 8000508 <TM1638_SetMultipleDigit_HEX+0x7c>)
 8000502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000506:	bf00      	nop
 8000508:	080005a1 	.word	0x080005a1
 800050c:	080005b5 	.word	0x080005b5
 8000510:	080005c9 	.word	0x080005c9
 8000514:	080005dd 	.word	0x080005dd
 8000518:	080005f1 	.word	0x080005f1
 800051c:	08000605 	.word	0x08000605
 8000520:	08000619 	.word	0x08000619
 8000524:	08000619 	.word	0x08000619
 8000528:	08000619 	.word	0x08000619
 800052c:	08000619 	.word	0x08000619
 8000530:	08000619 	.word	0x08000619
 8000534:	08000619 	.word	0x08000619
 8000538:	08000619 	.word	0x08000619
 800053c:	08000619 	.word	0x08000619
 8000540:	08000619 	.word	0x08000619
 8000544:	08000619 	.word	0x08000619
 8000548:	08000619 	.word	0x08000619
 800054c:	08000619 	.word	0x08000619
 8000550:	08000619 	.word	0x08000619
 8000554:	08000619 	.word	0x08000619
 8000558:	08000619 	.word	0x08000619
 800055c:	08000619 	.word	0x08000619
 8000560:	08000619 	.word	0x08000619
 8000564:	08000619 	.word	0x08000619
 8000568:	08000619 	.word	0x08000619
 800056c:	08000619 	.word	0x08000619
 8000570:	08000619 	.word	0x08000619
 8000574:	08000619 	.word	0x08000619
 8000578:	08000619 	.word	0x08000619
 800057c:	08000619 	.word	0x08000619
 8000580:	08000619 	.word	0x08000619
 8000584:	08000619 	.word	0x08000619
 8000588:	080005a1 	.word	0x080005a1
 800058c:	080005b5 	.word	0x080005b5
 8000590:	080005c9 	.word	0x080005c9
 8000594:	080005dd 	.word	0x080005dd
 8000598:	080005f1 	.word	0x080005f1
 800059c:	08000605 	.word	0x08000605
      {
      case 'A':
      case 'a':
        DigitDataHEX[i] = HexTo7Seg[0x0A] | DecimalPoint;
 80005a0:	2177      	movs	r1, #119	; 0x77
 80005a2:	7ffb      	ldrb	r3, [r7, #31]
 80005a4:	7fba      	ldrb	r2, [r7, #30]
 80005a6:	430a      	orrs	r2, r1
 80005a8:	b2d2      	uxtb	r2, r2
 80005aa:	3320      	adds	r3, #32
 80005ac:	443b      	add	r3, r7
 80005ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
        break;
 80005b2:	e038      	b.n	8000626 <TM1638_SetMultipleDigit_HEX+0x19a>

      case 'B':
      case 'b':
        DigitDataHEX[i] = HexTo7Seg[0x0B] | DecimalPoint;
 80005b4:	217c      	movs	r1, #124	; 0x7c
 80005b6:	7ffb      	ldrb	r3, [r7, #31]
 80005b8:	7fba      	ldrb	r2, [r7, #30]
 80005ba:	430a      	orrs	r2, r1
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	3320      	adds	r3, #32
 80005c0:	443b      	add	r3, r7
 80005c2:	f803 2c0c 	strb.w	r2, [r3, #-12]
        break;
 80005c6:	e02e      	b.n	8000626 <TM1638_SetMultipleDigit_HEX+0x19a>

      case 'C':
      case 'c':
        DigitDataHEX[i] = HexTo7Seg[0x0C] | DecimalPoint;
 80005c8:	2139      	movs	r1, #57	; 0x39
 80005ca:	7ffb      	ldrb	r3, [r7, #31]
 80005cc:	7fba      	ldrb	r2, [r7, #30]
 80005ce:	430a      	orrs	r2, r1
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	3320      	adds	r3, #32
 80005d4:	443b      	add	r3, r7
 80005d6:	f803 2c0c 	strb.w	r2, [r3, #-12]
        break;
 80005da:	e024      	b.n	8000626 <TM1638_SetMultipleDigit_HEX+0x19a>

      case 'D':
      case 'd':
        DigitDataHEX[i] = HexTo7Seg[0x0D] | DecimalPoint;
 80005dc:	215e      	movs	r1, #94	; 0x5e
 80005de:	7ffb      	ldrb	r3, [r7, #31]
 80005e0:	7fba      	ldrb	r2, [r7, #30]
 80005e2:	430a      	orrs	r2, r1
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	3320      	adds	r3, #32
 80005e8:	443b      	add	r3, r7
 80005ea:	f803 2c0c 	strb.w	r2, [r3, #-12]
        break;
 80005ee:	e01a      	b.n	8000626 <TM1638_SetMultipleDigit_HEX+0x19a>

      case 'E':
      case 'e':
        DigitDataHEX[i] = HexTo7Seg[0x0E] | DecimalPoint;
 80005f0:	2179      	movs	r1, #121	; 0x79
 80005f2:	7ffb      	ldrb	r3, [r7, #31]
 80005f4:	7fba      	ldrb	r2, [r7, #30]
 80005f6:	430a      	orrs	r2, r1
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	3320      	adds	r3, #32
 80005fc:	443b      	add	r3, r7
 80005fe:	f803 2c0c 	strb.w	r2, [r3, #-12]
        break;
 8000602:	e010      	b.n	8000626 <TM1638_SetMultipleDigit_HEX+0x19a>

      case 'F':
      case 'f':
        DigitDataHEX[i] = HexTo7Seg[0x0F] | DecimalPoint;
 8000604:	2171      	movs	r1, #113	; 0x71
 8000606:	7ffb      	ldrb	r3, [r7, #31]
 8000608:	7fba      	ldrb	r2, [r7, #30]
 800060a:	430a      	orrs	r2, r1
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	3320      	adds	r3, #32
 8000610:	443b      	add	r3, r7
 8000612:	f803 2c0c 	strb.w	r2, [r3, #-12]
        break;
 8000616:	e006      	b.n	8000626 <TM1638_SetMultipleDigit_HEX+0x19a>

      default:
        DigitDataHEX[i] = 0;
 8000618:	7ffb      	ldrb	r3, [r7, #31]
 800061a:	3320      	adds	r3, #32
 800061c:	443b      	add	r3, r7
 800061e:	2200      	movs	r2, #0
 8000620:	f803 2c0c 	strb.w	r2, [r3, #-12]
        break;
 8000624:	bf00      	nop
  for (uint8_t i = 0; i < Count; i++)
 8000626:	7ffb      	ldrb	r3, [r7, #31]
 8000628:	3301      	adds	r3, #1
 800062a:	77fb      	strb	r3, [r7, #31]
 800062c:	7ffa      	ldrb	r2, [r7, #31]
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	429a      	cmp	r2, r3
 8000632:	f4ff af3b 	bcc.w	80004ac <TM1638_SetMultipleDigit_HEX+0x20>
      }
    }
  }

  return TM1638_SetMultipleDigit(Handler,
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	79fa      	ldrb	r2, [r7, #7]
 800063a:	f107 0114 	add.w	r1, r7, #20
 800063e:	68f8      	ldr	r0, [r7, #12]
 8000640:	f7ff fe8e 	bl	8000360 <TM1638_SetMultipleDigit>
 8000644:	4603      	mov	r3, r0
                                 (const uint8_t *)DigitDataHEX, StartAddr, Count);
}
 8000646:	4618      	mov	r0, r3
 8000648:	3720      	adds	r7, #32
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	08001a28 	.word	0x08001a28

08000654 <TM1638_SetGPIO_OUT>:
 ==================================================================================
 */

static void
TM1638_SetGPIO_OUT(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = GPIO_Pin;
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2302      	movs	r3, #2
 800067a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	4619      	mov	r1, r3
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 fc0e 	bl	8000ea4 <HAL_GPIO_Init>
}
 8000688:	bf00      	nop
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <TM1638_SetGPIO_IN_PU>:
									
static void
TM1638_SetGPIO_IN_PU(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = GPIO_Pin;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2302      	movs	r3, #2
 80006b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	4619      	mov	r1, r3
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f000 fbf0 	bl	8000ea4 <HAL_GPIO_Init>
}
 80006c4:	bf00      	nop
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <TM1638_PlatformInit>:


static void
TM1638_PlatformInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  TM1638_SetGPIO_OUT(TM1638_CLK_GPIO, TM1638_CLK_PIN);
 80006d0:	2108      	movs	r1, #8
 80006d2:	4806      	ldr	r0, [pc, #24]	; (80006ec <TM1638_PlatformInit+0x20>)
 80006d4:	f7ff ffbe 	bl	8000654 <TM1638_SetGPIO_OUT>
  TM1638_SetGPIO_OUT(TM1638_STB_GPIO, TM1638_STB_PIN);
 80006d8:	2120      	movs	r1, #32
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <TM1638_PlatformInit+0x20>)
 80006dc:	f7ff ffba 	bl	8000654 <TM1638_SetGPIO_OUT>
  TM1638_SetGPIO_OUT(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 80006e0:	2110      	movs	r1, #16
 80006e2:	4802      	ldr	r0, [pc, #8]	; (80006ec <TM1638_PlatformInit+0x20>)
 80006e4:	f7ff ffb6 	bl	8000654 <TM1638_SetGPIO_OUT>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40010800 	.word	0x40010800

080006f0 <TM1638_PlatformDeInit>:

static void
TM1638_PlatformDeInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <TM1638_DioConfigOut>:

static void
TM1638_DioConfigOut(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  TM1638_SetGPIO_OUT(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 8000700:	2110      	movs	r1, #16
 8000702:	4802      	ldr	r0, [pc, #8]	; (800070c <TM1638_DioConfigOut+0x10>)
 8000704:	f7ff ffa6 	bl	8000654 <TM1638_SetGPIO_OUT>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40010800 	.word	0x40010800

08000710 <TM1638_DioConfigIn>:

static void
TM1638_DioConfigIn(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  TM1638_SetGPIO_IN_PU(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 8000714:	2110      	movs	r1, #16
 8000716:	4802      	ldr	r0, [pc, #8]	; (8000720 <TM1638_DioConfigIn+0x10>)
 8000718:	f7ff ffba 	bl	8000690 <TM1638_SetGPIO_IN_PU>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40010800 	.word	0x40010800

08000724 <TM1638_DioWrite>:

static void
TM1638_DioWrite(uint8_t Level)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(TM1638_DIO_GPIO, TM1638_DIO_PIN, Level);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	461a      	mov	r2, r3
 8000732:	2110      	movs	r1, #16
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <TM1638_DioWrite+0x20>)
 8000736:	f000 fd48 	bl	80011ca <HAL_GPIO_WritePin>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40010800 	.word	0x40010800

08000748 <TM1638_DioRead>:

static uint8_t
TM1638_DioRead(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(TM1638_DIO_GPIO, TM1638_DIO_PIN);
 800074c:	2110      	movs	r1, #16
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <TM1638_DioRead+0x14>)
 8000750:	f000 fd24 	bl	800119c <HAL_GPIO_ReadPin>
 8000754:	4603      	mov	r3, r0
}
 8000756:	4618      	mov	r0, r3
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40010800 	.word	0x40010800

08000760 <TM1638_ClkWrite>:

static void
TM1638_ClkWrite(uint8_t Level)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(TM1638_CLK_GPIO, TM1638_CLK_PIN, Level);
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	461a      	mov	r2, r3
 800076e:	2108      	movs	r1, #8
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <TM1638_ClkWrite+0x20>)
 8000772:	f000 fd2a 	bl	80011ca <HAL_GPIO_WritePin>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40010800 	.word	0x40010800

08000784 <TM1638_StbWrite>:

static void
TM1638_StbWrite(uint8_t Level)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(TM1638_STB_GPIO, TM1638_STB_PIN, Level);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	461a      	mov	r2, r3
 8000792:	2120      	movs	r1, #32
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <TM1638_StbWrite+0x20>)
 8000796:	f000 fd18 	bl	80011ca <HAL_GPIO_WritePin>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40010800 	.word	0x40010800

080007a8 <TM1638_DelayUs>:

static void
TM1638_DelayUs(uint8_t Delay)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
  // TODO: Implement a proper delay function. This one is not accurate.
  for (uint32_t DelayCounter = 0; DelayCounter < 100 * Delay; DelayCounter++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	e002      	b.n	80007be <TM1638_DelayUs+0x16>
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	3301      	adds	r3, #1
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2264      	movs	r2, #100	; 0x64
 80007c2:	fb02 f303 	mul.w	r3, r2, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d3f4      	bcc.n	80007b8 <TM1638_DelayUs+0x10>
    DelayCounter = DelayCounter;
}
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
	...

080007dc <TM1638_Platform_Init>:
 * @param  Handler: Pointer to handler
 * @retval None
 */
void
TM1638_Platform_Init(TM1638_Handler_t *Handler)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  Handler->PlatformInit = TM1638_PlatformInit;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <TM1638_Platform_Init+0x48>)
 80007e8:	601a      	str	r2, [r3, #0]
  Handler->PlatformDeInit = TM1638_PlatformDeInit;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <TM1638_Platform_Init+0x4c>)
 80007ee:	605a      	str	r2, [r3, #4]
  Handler->DioConfigOut = TM1638_DioConfigOut;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <TM1638_Platform_Init+0x50>)
 80007f4:	609a      	str	r2, [r3, #8]
  Handler->DioConfigIn = TM1638_DioConfigIn;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <TM1638_Platform_Init+0x54>)
 80007fa:	60da      	str	r2, [r3, #12]
  Handler->DioWrite = TM1638_DioWrite;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <TM1638_Platform_Init+0x58>)
 8000800:	611a      	str	r2, [r3, #16]
  Handler->DioRead = TM1638_DioRead;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <TM1638_Platform_Init+0x5c>)
 8000806:	615a      	str	r2, [r3, #20]
  Handler->ClkWrite = TM1638_ClkWrite;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a0c      	ldr	r2, [pc, #48]	; (800083c <TM1638_Platform_Init+0x60>)
 800080c:	619a      	str	r2, [r3, #24]
  Handler->StbWrite = TM1638_StbWrite;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <TM1638_Platform_Init+0x64>)
 8000812:	61da      	str	r2, [r3, #28]
  Handler->DelayUs = TM1638_DelayUs;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <TM1638_Platform_Init+0x68>)
 8000818:	621a      	str	r2, [r3, #32]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	080006cd 	.word	0x080006cd
 8000828:	080006f1 	.word	0x080006f1
 800082c:	080006fd 	.word	0x080006fd
 8000830:	08000711 	.word	0x08000711
 8000834:	08000725 	.word	0x08000725
 8000838:	08000749 	.word	0x08000749
 800083c:	08000761 	.word	0x08000761
 8000840:	08000785 	.word	0x08000785
 8000844:	080007a9 	.word	0x080007a9

08000848 <printLCD>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void printLCD(int minutes, int second){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
    Buffer[2] = minutes % 10;
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <printLCD+0xcc>)
 8000856:	fb83 1302 	smull	r1, r3, r3, r2
 800085a:	1099      	asrs	r1, r3, #2
 800085c:	17d3      	asrs	r3, r2, #31
 800085e:	1ac9      	subs	r1, r1, r3
 8000860:	460b      	mov	r3, r1
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	440b      	add	r3, r1
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	1ad1      	subs	r1, r2, r3
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <printLCD+0xd0>)
 800086e:	709a      	strb	r2, [r3, #2]
    Buffer[0] = (minutes / 10) % 10;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a28      	ldr	r2, [pc, #160]	; (8000914 <printLCD+0xcc>)
 8000874:	fb82 1203 	smull	r1, r2, r2, r3
 8000878:	1092      	asrs	r2, r2, #2
 800087a:	17db      	asrs	r3, r3, #31
 800087c:	1ad2      	subs	r2, r2, r3
 800087e:	4b25      	ldr	r3, [pc, #148]	; (8000914 <printLCD+0xcc>)
 8000880:	fb83 1302 	smull	r1, r3, r3, r2
 8000884:	1099      	asrs	r1, r3, #2
 8000886:	17d3      	asrs	r3, r2, #31
 8000888:	1ac9      	subs	r1, r1, r3
 800088a:	460b      	mov	r3, r1
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	440b      	add	r3, r1
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	1ad1      	subs	r1, r2, r3
 8000894:	b2ca      	uxtb	r2, r1
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <printLCD+0xd0>)
 8000898:	701a      	strb	r2, [r3, #0]
    Buffer[6] = second % 10;
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <printLCD+0xcc>)
 800089e:	fb83 1302 	smull	r1, r3, r3, r2
 80008a2:	1099      	asrs	r1, r3, #2
 80008a4:	17d3      	asrs	r3, r2, #31
 80008a6:	1ac9      	subs	r1, r1, r3
 80008a8:	460b      	mov	r3, r1
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	440b      	add	r3, r1
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	1ad1      	subs	r1, r2, r3
 80008b2:	b2ca      	uxtb	r2, r1
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <printLCD+0xd0>)
 80008b6:	719a      	strb	r2, [r3, #6]
    Buffer[4] = (second / 10) % 10;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <printLCD+0xcc>)
 80008bc:	fb82 1203 	smull	r1, r2, r2, r3
 80008c0:	1092      	asrs	r2, r2, #2
 80008c2:	17db      	asrs	r3, r3, #31
 80008c4:	1ad2      	subs	r2, r2, r3
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <printLCD+0xcc>)
 80008c8:	fb83 1302 	smull	r1, r3, r3, r2
 80008cc:	1099      	asrs	r1, r3, #2
 80008ce:	17d3      	asrs	r3, r2, #31
 80008d0:	1ac9      	subs	r1, r1, r3
 80008d2:	460b      	mov	r3, r1
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	440b      	add	r3, r1
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	1ad1      	subs	r1, r2, r3
 80008dc:	b2ca      	uxtb	r2, r1
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <printLCD+0xd0>)
 80008e0:	711a      	strb	r2, [r3, #4]

	Buffer[6] |= TM1638DecimalPoint;
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <printLCD+0xd0>)
 80008e4:	799b      	ldrb	r3, [r3, #6]
 80008e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <printLCD+0xd0>)
 80008ee:	719a      	strb	r2, [r3, #6]
	Buffer[4] |= TM1638DecimalPoint;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <printLCD+0xd0>)
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <printLCD+0xd0>)
 80008fc:	711a      	strb	r2, [r3, #4]

	TM1638_SetMultipleDigit_HEX(&Handler, Buffer, 0, 7);
 80008fe:	2307      	movs	r3, #7
 8000900:	2200      	movs	r2, #0
 8000902:	4905      	ldr	r1, [pc, #20]	; (8000918 <printLCD+0xd0>)
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <printLCD+0xd4>)
 8000906:	f7ff fdc1 	bl	800048c <TM1638_SetMultipleDigit_HEX>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	66666667 	.word	0x66666667
 8000918:	2000006c 	.word	0x2000006c
 800091c:	20000034 	.word	0x20000034

08000920 <setTimeAuto>:
void setTimeAuto(void){
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	while (minutes >= 0) {
 8000924:	e024      	b.n	8000970 <setTimeAuto+0x50>
		printLCD(minutes,seconds);
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <setTimeAuto+0x60>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a16      	ldr	r2, [pc, #88]	; (8000984 <setTimeAuto+0x64>)
 800092c:	6812      	ldr	r2, [r2, #0]
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff89 	bl	8000848 <printLCD>
		HAL_Delay(100);
 8000936:	2064      	movs	r0, #100	; 0x64
 8000938:	f000 f9ac 	bl	8000c94 <HAL_Delay>
		if (seconds == 0) {
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <setTimeAuto+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d110      	bne.n	8000966 <setTimeAuto+0x46>
			if (minutes == 0){
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <setTimeAuto+0x60>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d103      	bne.n	8000954 <setTimeAuto+0x34>
				flag_timeout=true;
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <setTimeAuto+0x68>)
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
				break;
 8000952:	e012      	b.n	800097a <setTimeAuto+0x5a>
			}
			minutes--;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <setTimeAuto+0x60>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	3b01      	subs	r3, #1
 800095a:	4a09      	ldr	r2, [pc, #36]	; (8000980 <setTimeAuto+0x60>)
 800095c:	6013      	str	r3, [r2, #0]
			seconds = 59;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <setTimeAuto+0x64>)
 8000960:	223b      	movs	r2, #59	; 0x3b
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	e004      	b.n	8000970 <setTimeAuto+0x50>
		} else {
			seconds--;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <setTimeAuto+0x64>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3b01      	subs	r3, #1
 800096c:	4a05      	ldr	r2, [pc, #20]	; (8000984 <setTimeAuto+0x64>)
 800096e:	6013      	str	r3, [r2, #0]
	while (minutes >= 0) {
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <setTimeAuto+0x60>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	dad6      	bge.n	8000926 <setTimeAuto+0x6>
		}
	}
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000000 	.word	0x20000000
 8000984:	20000074 	.word	0x20000074
 8000988:	20000078 	.word	0x20000078

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000990:	f000 f91e 	bl	8000bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f816 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f000 f850 	bl	8000a3c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Bs81x_Init();
 800099c:	f7ff fbd6 	bl	800014c <Bs81x_Init>

  TM1638_Platform_Init(&Handler);
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <main+0x34>)
 80009a2:	f7ff ff1b 	bl	80007dc <TM1638_Platform_Init>
  TM1638_Init(&Handler, TM1638DisplayTypeComCathode);
 80009a6:	2100      	movs	r1, #0
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <main+0x34>)
 80009aa:	f7ff fc79 	bl	80002a0 <TM1638_Init>
  TM1638_ConfigDisplay(&Handler, 7, TM1638DisplayStateON);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2107      	movs	r1, #7
 80009b2:	4803      	ldr	r0, [pc, #12]	; (80009c0 <main+0x34>)
 80009b4:	f7ff fca1 	bl	80002fa <TM1638_ConfigDisplay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  setTimeAuto();
 80009b8:	f7ff ffb2 	bl	8000920 <setTimeAuto>
 80009bc:	e7fc      	b.n	80009b8 <main+0x2c>
 80009be:	bf00      	nop
 80009c0:	20000034 	.word	0x20000034

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b090      	sub	sp, #64	; 0x40
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0318 	add.w	r3, r7, #24
 80009ce:	2228      	movs	r2, #40	; 0x28
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fff0 	bl	80019b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ea:	2301      	movs	r3, #1
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ee:	2310      	movs	r3, #16
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0318 	add.w	r3, r7, #24
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fbfe 	bl	80011fc <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a06:	f000 f857 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fe6c 	bl	8001700 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 f843 	bl	8000ab8 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3740      	adds	r7, #64	; 0x40
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_GPIO_Init+0x74>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <MX_GPIO_Init+0x74>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_GPIO_Init+0x74>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_BS81X_CLOCK_GPIO_Port, _BS81X_CLOCK_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2140      	movs	r1, #64	; 0x40
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <MX_GPIO_Init+0x78>)
 8000a6e:	f000 fbac 	bl	80011ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : _BS81X_CLOCK_Pin */
  GPIO_InitStruct.Pin = _BS81X_CLOCK_Pin;
 8000a72:	2340      	movs	r3, #64	; 0x40
 8000a74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(_BS81X_CLOCK_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	4619      	mov	r1, r3
 8000a88:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <MX_GPIO_Init+0x78>)
 8000a8a:	f000 fa0b 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : _BS81X_DATA_Pin */
  GPIO_InitStruct.Pin = _BS81X_DATA_Pin;
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(_BS81X_DATA_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_GPIO_Init+0x78>)
 8000aa2:	f000 f9ff 	bl	8000ea4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010800 	.word	0x40010800

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_MspInit+0x5c>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6193      	str	r3, [r2, #24]
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_MspInit+0x5c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	61d3      	str	r3, [r2, #28]
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_MspInit+0x5c>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_MspInit+0x60>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_MspInit+0x60>)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010000 	.word	0x40010000

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6e:	f000 f875 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
	...

08000b84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b84:	f7ff fff7 	bl	8000b76 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b8a:	490c      	ldr	r1, [pc, #48]	; (8000bbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ba0:	4c09      	ldr	r4, [pc, #36]	; (8000bc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bae:	f000 ff0b 	bl	80019c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb2:	f7ff feeb 	bl	800098c <main>
  bx lr
 8000bb6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bc0:	08001a7c 	.word	0x08001a7c
  ldr r2, =_sbss
 8000bc4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bc8:	20000080 	.word	0x20000080

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>
	...

08000bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_Init+0x28>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_Init+0x28>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f92b 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f000 f808 	bl	8000bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff ff6a 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40022000 	.word	0x40022000

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x54>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0x58>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f935 	bl	8000e8a <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00e      	b.n	8000c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d80a      	bhi.n	8000c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f000 f90b 	bl	8000e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <HAL_InitTick+0x5c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000004 	.word	0x20000004
 8000c54:	2000000c 	.word	0x2000000c
 8000c58:	20000008 	.word	0x20000008

08000c5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x1c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_IncTick+0x20>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a03      	ldr	r2, [pc, #12]	; (8000c7c <HAL_IncTick+0x20>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	2000000c 	.word	0x2000000c
 8000c7c:	2000007c 	.word	0x2000007c

08000c80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b02      	ldr	r3, [pc, #8]	; (8000c90 <HAL_GetTick+0x10>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	2000007c 	.word	0x2000007c

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff fff0 	bl	8000c80 <HAL_GetTick>
 8000ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cac:	d005      	beq.n	8000cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_Delay+0x44>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cba:	bf00      	nop
 8000cbc:	f7ff ffe0 	bl	8000c80 <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d8f7      	bhi.n	8000cbc <HAL_Delay+0x28>
  {
  }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000000c 	.word	0x2000000c

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e08:	d301      	bcc.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00f      	b.n	8000e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <SysTick_Config+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	210f      	movs	r1, #15
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f7ff ff90 	bl	8000d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SysTick_Config+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SysTick_Config+0x40>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff49 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e64:	f7ff ff5e 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ff90 	bl	8000d94 <NVIC_EncodePriority>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff5f 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffb0 	bl	8000df8 <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b08b      	sub	sp, #44	; 0x2c
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb6:	e161      	b.n	800117c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	69fa      	ldr	r2, [r7, #28]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	f040 8150 	bne.w	8001176 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	4a97      	ldr	r2, [pc, #604]	; (8001138 <HAL_GPIO_Init+0x294>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d05e      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000ee0:	4a95      	ldr	r2, [pc, #596]	; (8001138 <HAL_GPIO_Init+0x294>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d875      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000ee6:	4a95      	ldr	r2, [pc, #596]	; (800113c <HAL_GPIO_Init+0x298>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d058      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000eec:	4a93      	ldr	r2, [pc, #588]	; (800113c <HAL_GPIO_Init+0x298>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d86f      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000ef2:	4a93      	ldr	r2, [pc, #588]	; (8001140 <HAL_GPIO_Init+0x29c>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d052      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000ef8:	4a91      	ldr	r2, [pc, #580]	; (8001140 <HAL_GPIO_Init+0x29c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d869      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000efe:	4a91      	ldr	r2, [pc, #580]	; (8001144 <HAL_GPIO_Init+0x2a0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d04c      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000f04:	4a8f      	ldr	r2, [pc, #572]	; (8001144 <HAL_GPIO_Init+0x2a0>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d863      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000f0a:	4a8f      	ldr	r2, [pc, #572]	; (8001148 <HAL_GPIO_Init+0x2a4>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d046      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000f10:	4a8d      	ldr	r2, [pc, #564]	; (8001148 <HAL_GPIO_Init+0x2a4>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d85d      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000f16:	2b12      	cmp	r3, #18
 8000f18:	d82a      	bhi.n	8000f70 <HAL_GPIO_Init+0xcc>
 8000f1a:	2b12      	cmp	r3, #18
 8000f1c:	d859      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000f1e:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <HAL_GPIO_Init+0x80>)
 8000f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f24:	08000f9f 	.word	0x08000f9f
 8000f28:	08000f79 	.word	0x08000f79
 8000f2c:	08000f8b 	.word	0x08000f8b
 8000f30:	08000fcd 	.word	0x08000fcd
 8000f34:	08000fd3 	.word	0x08000fd3
 8000f38:	08000fd3 	.word	0x08000fd3
 8000f3c:	08000fd3 	.word	0x08000fd3
 8000f40:	08000fd3 	.word	0x08000fd3
 8000f44:	08000fd3 	.word	0x08000fd3
 8000f48:	08000fd3 	.word	0x08000fd3
 8000f4c:	08000fd3 	.word	0x08000fd3
 8000f50:	08000fd3 	.word	0x08000fd3
 8000f54:	08000fd3 	.word	0x08000fd3
 8000f58:	08000fd3 	.word	0x08000fd3
 8000f5c:	08000fd3 	.word	0x08000fd3
 8000f60:	08000fd3 	.word	0x08000fd3
 8000f64:	08000fd3 	.word	0x08000fd3
 8000f68:	08000f81 	.word	0x08000f81
 8000f6c:	08000f95 	.word	0x08000f95
 8000f70:	4a76      	ldr	r2, [pc, #472]	; (800114c <HAL_GPIO_Init+0x2a8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f76:	e02c      	b.n	8000fd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	623b      	str	r3, [r7, #32]
          break;
 8000f7e:	e029      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	3304      	adds	r3, #4
 8000f86:	623b      	str	r3, [r7, #32]
          break;
 8000f88:	e024      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	3308      	adds	r3, #8
 8000f90:	623b      	str	r3, [r7, #32]
          break;
 8000f92:	e01f      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	330c      	adds	r3, #12
 8000f9a:	623b      	str	r3, [r7, #32]
          break;
 8000f9c:	e01a      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d102      	bne.n	8000fac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	623b      	str	r3, [r7, #32]
          break;
 8000faa:	e013      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d105      	bne.n	8000fc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	611a      	str	r2, [r3, #16]
          break;
 8000fbe:	e009      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	615a      	str	r2, [r3, #20]
          break;
 8000fca:	e003      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
          break;
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          break;
 8000fd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	2bff      	cmp	r3, #255	; 0xff
 8000fd8:	d801      	bhi.n	8000fde <HAL_GPIO_Init+0x13a>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	e001      	b.n	8000fe2 <HAL_GPIO_Init+0x13e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2bff      	cmp	r3, #255	; 0xff
 8000fe8:	d802      	bhi.n	8000ff0 <HAL_GPIO_Init+0x14c>
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_Init+0x152>
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	3b08      	subs	r3, #8
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	210f      	movs	r1, #15
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	401a      	ands	r2, r3
 8001008:	6a39      	ldr	r1, [r7, #32]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	fa01 f303 	lsl.w	r3, r1, r3
 8001010:	431a      	orrs	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 80a9 	beq.w	8001176 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001024:	4b4a      	ldr	r3, [pc, #296]	; (8001150 <HAL_GPIO_Init+0x2ac>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a49      	ldr	r2, [pc, #292]	; (8001150 <HAL_GPIO_Init+0x2ac>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b47      	ldr	r3, [pc, #284]	; (8001150 <HAL_GPIO_Init+0x2ac>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800103c:	4a45      	ldr	r2, [pc, #276]	; (8001154 <HAL_GPIO_Init+0x2b0>)
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001048:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	220f      	movs	r2, #15
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a3d      	ldr	r2, [pc, #244]	; (8001158 <HAL_GPIO_Init+0x2b4>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d00d      	beq.n	8001084 <HAL_GPIO_Init+0x1e0>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a3c      	ldr	r2, [pc, #240]	; (800115c <HAL_GPIO_Init+0x2b8>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d007      	beq.n	8001080 <HAL_GPIO_Init+0x1dc>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a3b      	ldr	r2, [pc, #236]	; (8001160 <HAL_GPIO_Init+0x2bc>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d101      	bne.n	800107c <HAL_GPIO_Init+0x1d8>
 8001078:	2302      	movs	r3, #2
 800107a:	e004      	b.n	8001086 <HAL_GPIO_Init+0x1e2>
 800107c:	2303      	movs	r3, #3
 800107e:	e002      	b.n	8001086 <HAL_GPIO_Init+0x1e2>
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <HAL_GPIO_Init+0x1e2>
 8001084:	2300      	movs	r3, #0
 8001086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001088:	f002 0203 	and.w	r2, r2, #3
 800108c:	0092      	lsls	r2, r2, #2
 800108e:	4093      	lsls	r3, r2
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001096:	492f      	ldr	r1, [pc, #188]	; (8001154 <HAL_GPIO_Init+0x2b0>)
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	492b      	ldr	r1, [pc, #172]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	608b      	str	r3, [r1, #8]
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	4927      	ldr	r1, [pc, #156]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d006      	beq.n	80010e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	4921      	ldr	r1, [pc, #132]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	60cb      	str	r3, [r1, #12]
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	491d      	ldr	r1, [pc, #116]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d006      	beq.n	800110e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4917      	ldr	r1, [pc, #92]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	43db      	mvns	r3, r3
 8001116:	4913      	ldr	r1, [pc, #76]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 8001118:	4013      	ands	r3, r2
 800111a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d01f      	beq.n	8001168 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	490d      	ldr	r1, [pc, #52]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	600b      	str	r3, [r1, #0]
 8001134:	e01f      	b.n	8001176 <HAL_GPIO_Init+0x2d2>
 8001136:	bf00      	nop
 8001138:	10320000 	.word	0x10320000
 800113c:	10310000 	.word	0x10310000
 8001140:	10220000 	.word	0x10220000
 8001144:	10210000 	.word	0x10210000
 8001148:	10120000 	.word	0x10120000
 800114c:	10110000 	.word	0x10110000
 8001150:	40021000 	.word	0x40021000
 8001154:	40010000 	.word	0x40010000
 8001158:	40010800 	.word	0x40010800
 800115c:	40010c00 	.word	0x40010c00
 8001160:	40011000 	.word	0x40011000
 8001164:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_GPIO_Init+0x2f4>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	43db      	mvns	r3, r3
 8001170:	4909      	ldr	r1, [pc, #36]	; (8001198 <HAL_GPIO_Init+0x2f4>)
 8001172:	4013      	ands	r3, r2
 8001174:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	3301      	adds	r3, #1
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	fa22 f303 	lsr.w	r3, r2, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	f47f ae96 	bne.w	8000eb8 <HAL_GPIO_Init+0x14>
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	372c      	adds	r7, #44	; 0x2c
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	40010400 	.word	0x40010400

0800119c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e001      	b.n	80011be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	807b      	strh	r3, [r7, #2]
 80011d6:	4613      	mov	r3, r2
 80011d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011da:	787b      	ldrb	r3, [r7, #1]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e0:	887a      	ldrh	r2, [r7, #2]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011e6:	e003      	b.n	80011f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	041a      	lsls	r2, r3, #16
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	611a      	str	r2, [r3, #16]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e272      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8087 	beq.w	800132a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800121c:	4b92      	ldr	r3, [pc, #584]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b04      	cmp	r3, #4
 8001226:	d00c      	beq.n	8001242 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001228:	4b8f      	ldr	r3, [pc, #572]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b08      	cmp	r3, #8
 8001232:	d112      	bne.n	800125a <HAL_RCC_OscConfig+0x5e>
 8001234:	4b8c      	ldr	r3, [pc, #560]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001240:	d10b      	bne.n	800125a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001242:	4b89      	ldr	r3, [pc, #548]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d06c      	beq.n	8001328 <HAL_RCC_OscConfig+0x12c>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d168      	bne.n	8001328 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e24c      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001262:	d106      	bne.n	8001272 <HAL_RCC_OscConfig+0x76>
 8001264:	4b80      	ldr	r3, [pc, #512]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a7f      	ldr	r2, [pc, #508]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 800126a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	e02e      	b.n	80012d0 <HAL_RCC_OscConfig+0xd4>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x98>
 800127a:	4b7b      	ldr	r3, [pc, #492]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a7a      	ldr	r2, [pc, #488]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b78      	ldr	r3, [pc, #480]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a77      	ldr	r2, [pc, #476]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 800128c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e01d      	b.n	80012d0 <HAL_RCC_OscConfig+0xd4>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0xbc>
 800129e:	4b72      	ldr	r3, [pc, #456]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a71      	ldr	r2, [pc, #452]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b6f      	ldr	r3, [pc, #444]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a6e      	ldr	r2, [pc, #440]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e00b      	b.n	80012d0 <HAL_RCC_OscConfig+0xd4>
 80012b8:	4b6b      	ldr	r3, [pc, #428]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a6a      	ldr	r2, [pc, #424]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b68      	ldr	r3, [pc, #416]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a67      	ldr	r2, [pc, #412]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d013      	beq.n	8001300 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fcd2 	bl	8000c80 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fcce 	bl	8000c80 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e200      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4b5d      	ldr	r3, [pc, #372]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0xe4>
 80012fe:	e014      	b.n	800132a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fcbe 	bl	8000c80 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fcba 	bl	8000c80 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e1ec      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	4b53      	ldr	r3, [pc, #332]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x10c>
 8001326:	e000      	b.n	800132a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d063      	beq.n	80013fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001336:	4b4c      	ldr	r3, [pc, #304]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00b      	beq.n	800135a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001342:	4b49      	ldr	r3, [pc, #292]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b08      	cmp	r3, #8
 800134c:	d11c      	bne.n	8001388 <HAL_RCC_OscConfig+0x18c>
 800134e:	4b46      	ldr	r3, [pc, #280]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d116      	bne.n	8001388 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	4b43      	ldr	r3, [pc, #268]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <HAL_RCC_OscConfig+0x176>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d001      	beq.n	8001372 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e1c0      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4939      	ldr	r1, [pc, #228]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	e03a      	b.n	80013fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001390:	4b36      	ldr	r3, [pc, #216]	; (800146c <HAL_RCC_OscConfig+0x270>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff fc73 	bl	8000c80 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139e:	f7ff fc6f 	bl	8000c80 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e1a1      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4927      	ldr	r1, [pc, #156]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
 80013d0:	e015      	b.n	80013fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_RCC_OscConfig+0x270>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fc52 	bl	8000c80 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e0:	f7ff fc4e 	bl	8000c80 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e180      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d03a      	beq.n	8001480 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d019      	beq.n	8001446 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_RCC_OscConfig+0x274>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001418:	f7ff fc32 	bl	8000c80 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001420:	f7ff fc2e 	bl	8000c80 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e160      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <HAL_RCC_OscConfig+0x26c>)
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800143e:	2001      	movs	r0, #1
 8001440:	f000 fa9c 	bl	800197c <RCC_Delay>
 8001444:	e01c      	b.n	8001480 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_RCC_OscConfig+0x274>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144c:	f7ff fc18 	bl	8000c80 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001452:	e00f      	b.n	8001474 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001454:	f7ff fc14 	bl	8000c80 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d908      	bls.n	8001474 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e146      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000
 800146c:	42420000 	.word	0x42420000
 8001470:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001474:	4b92      	ldr	r3, [pc, #584]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1e9      	bne.n	8001454 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80a6 	beq.w	80015da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001492:	4b8b      	ldr	r3, [pc, #556]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10d      	bne.n	80014ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a87      	ldr	r2, [pc, #540]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	4b85      	ldr	r3, [pc, #532]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b6:	2301      	movs	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ba:	4b82      	ldr	r3, [pc, #520]	; (80016c4 <HAL_RCC_OscConfig+0x4c8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d118      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c6:	4b7f      	ldr	r3, [pc, #508]	; (80016c4 <HAL_RCC_OscConfig+0x4c8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a7e      	ldr	r2, [pc, #504]	; (80016c4 <HAL_RCC_OscConfig+0x4c8>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fbd5 	bl	8000c80 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014da:	f7ff fbd1 	bl	8000c80 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b64      	cmp	r3, #100	; 0x64
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e103      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	4b75      	ldr	r3, [pc, #468]	; (80016c4 <HAL_RCC_OscConfig+0x4c8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d106      	bne.n	800150e <HAL_RCC_OscConfig+0x312>
 8001500:	4b6f      	ldr	r3, [pc, #444]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	4a6e      	ldr	r2, [pc, #440]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6213      	str	r3, [r2, #32]
 800150c:	e02d      	b.n	800156a <HAL_RCC_OscConfig+0x36e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x334>
 8001516:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	4a69      	ldr	r2, [pc, #420]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6213      	str	r3, [r2, #32]
 8001522:	4b67      	ldr	r3, [pc, #412]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4a66      	ldr	r2, [pc, #408]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	f023 0304 	bic.w	r3, r3, #4
 800152c:	6213      	str	r3, [r2, #32]
 800152e:	e01c      	b.n	800156a <HAL_RCC_OscConfig+0x36e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	2b05      	cmp	r3, #5
 8001536:	d10c      	bne.n	8001552 <HAL_RCC_OscConfig+0x356>
 8001538:	4b61      	ldr	r3, [pc, #388]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a60      	ldr	r2, [pc, #384]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	6213      	str	r3, [r2, #32]
 8001544:	4b5e      	ldr	r3, [pc, #376]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4a5d      	ldr	r2, [pc, #372]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6213      	str	r3, [r2, #32]
 8001550:	e00b      	b.n	800156a <HAL_RCC_OscConfig+0x36e>
 8001552:	4b5b      	ldr	r3, [pc, #364]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4a5a      	ldr	r2, [pc, #360]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	6213      	str	r3, [r2, #32]
 800155e:	4b58      	ldr	r3, [pc, #352]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4a57      	ldr	r2, [pc, #348]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	f023 0304 	bic.w	r3, r3, #4
 8001568:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d015      	beq.n	800159e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff fb85 	bl	8000c80 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157a:	f7ff fb81 	bl	8000c80 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f241 3288 	movw	r2, #5000	; 0x1388
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e0b1      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001590:	4b4b      	ldr	r3, [pc, #300]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0ee      	beq.n	800157a <HAL_RCC_OscConfig+0x37e>
 800159c:	e014      	b.n	80015c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159e:	f7ff fb6f 	bl	8000c80 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff fb6b 	bl	8000c80 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e09b      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015bc:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1ee      	bne.n	80015a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d105      	bne.n	80015da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ce:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a3b      	ldr	r2, [pc, #236]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 8087 	beq.w	80016f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e4:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d061      	beq.n	80016b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d146      	bne.n	8001686 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f8:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <HAL_RCC_OscConfig+0x4cc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fb3f 	bl	8000c80 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001606:	f7ff fb3b 	bl	8000c80 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e06d      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001618:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f0      	bne.n	8001606 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162c:	d108      	bne.n	8001640 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	4921      	ldr	r1, [pc, #132]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a19      	ldr	r1, [r3, #32]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	430b      	orrs	r3, r1
 8001652:	491b      	ldr	r1, [pc, #108]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_RCC_OscConfig+0x4cc>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fb0f 	bl	8000c80 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff fb0b 	bl	8000c80 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e03d      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x46a>
 8001684:	e035      	b.n	80016f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_RCC_OscConfig+0x4cc>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff faf8 	bl	8000c80 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001694:	f7ff faf4 	bl	8000c80 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e026      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x498>
 80016b2:	e01e      	b.n	80016f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e019      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40007000 	.word	0x40007000
 80016c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_RCC_OscConfig+0x500>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d001      	beq.n	80016f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0d0      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001714:	4b6a      	ldr	r3, [pc, #424]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d910      	bls.n	8001744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 0207 	bic.w	r2, r3, #7
 800172a:	4965      	ldr	r1, [pc, #404]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001732:	4b63      	ldr	r3, [pc, #396]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0b8      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4a58      	ldr	r2, [pc, #352]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001766:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800177e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001780:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	494d      	ldr	r1, [pc, #308]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	4313      	orrs	r3, r2
 8001790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d040      	beq.n	8001820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d115      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e07f      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e073      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ce:	4b3d      	ldr	r3, [pc, #244]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e06b      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017de:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f023 0203 	bic.w	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4936      	ldr	r1, [pc, #216]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f0:	f7ff fa46 	bl	8000c80 <HAL_GetTick>
 80017f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	e00a      	b.n	800180e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f8:	f7ff fa42 	bl	8000c80 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	; 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e053      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 020c 	and.w	r2, r3, #12
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	429a      	cmp	r2, r3
 800181e:	d1eb      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001820:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d210      	bcs.n	8001850 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 0207 	bic.w	r2, r3, #7
 8001836:	4922      	ldr	r1, [pc, #136]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e032      	b.n	80018b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d008      	beq.n	800186e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4916      	ldr	r1, [pc, #88]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	4313      	orrs	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	490e      	ldr	r1, [pc, #56]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	4313      	orrs	r3, r2
 800188c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800188e:	f000 f821 	bl	80018d4 <HAL_RCC_GetSysClockFreq>
 8001892:	4602      	mov	r2, r0
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	490a      	ldr	r1, [pc, #40]	; (80018c8 <HAL_RCC_ClockConfig+0x1c8>)
 80018a0:	5ccb      	ldrb	r3, [r1, r3]
 80018a2:	fa22 f303 	lsr.w	r3, r2, r3
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <HAL_RCC_ClockConfig+0x1cc>)
 80018a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_RCC_ClockConfig+0x1d0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f9a4 	bl	8000bfc <HAL_InitTick>

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40022000 	.word	0x40022000
 80018c4:	40021000 	.word	0x40021000
 80018c8:	08001a50 	.word	0x08001a50
 80018cc:	20000004 	.word	0x20000004
 80018d0:	20000008 	.word	0x20000008

080018d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <HAL_RCC_GetSysClockFreq+0x94>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d002      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x30>
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d003      	beq.n	800190a <HAL_RCC_GetSysClockFreq+0x36>
 8001902:	e027      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_RCC_GetSysClockFreq+0x98>)
 8001906:	613b      	str	r3, [r7, #16]
      break;
 8001908:	e027      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	0c9b      	lsrs	r3, r3, #18
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	4a17      	ldr	r2, [pc, #92]	; (8001970 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d010      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_RCC_GetSysClockFreq+0x94>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	0c5b      	lsrs	r3, r3, #17
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	4a11      	ldr	r2, [pc, #68]	; (8001974 <HAL_RCC_GetSysClockFreq+0xa0>)
 800192e:	5cd3      	ldrb	r3, [r2, r3]
 8001930:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <HAL_RCC_GetSysClockFreq+0x98>)
 8001936:	fb03 f202 	mul.w	r2, r3, r2
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e004      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	613b      	str	r3, [r7, #16]
      break;
 8001952:	e002      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_RCC_GetSysClockFreq+0x98>)
 8001956:	613b      	str	r3, [r7, #16]
      break;
 8001958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195a:	693b      	ldr	r3, [r7, #16]
}
 800195c:	4618      	mov	r0, r3
 800195e:	371c      	adds	r7, #28
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	007a1200 	.word	0x007a1200
 8001970:	08001a60 	.word	0x08001a60
 8001974:	08001a70 	.word	0x08001a70
 8001978:	003d0900 	.word	0x003d0900

0800197c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <RCC_Delay+0x34>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <RCC_Delay+0x38>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0a5b      	lsrs	r3, r3, #9
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001998:	bf00      	nop
  }
  while (Delay --);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1e5a      	subs	r2, r3, #1
 800199e:	60fa      	str	r2, [r7, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f9      	bne.n	8001998 <RCC_Delay+0x1c>
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	20000004 	.word	0x20000004
 80019b4:	10624dd3 	.word	0x10624dd3

080019b8 <memset>:
 80019b8:	4603      	mov	r3, r0
 80019ba:	4402      	add	r2, r0
 80019bc:	4293      	cmp	r3, r2
 80019be:	d100      	bne.n	80019c2 <memset+0xa>
 80019c0:	4770      	bx	lr
 80019c2:	f803 1b01 	strb.w	r1, [r3], #1
 80019c6:	e7f9      	b.n	80019bc <memset+0x4>

080019c8 <__libc_init_array>:
 80019c8:	b570      	push	{r4, r5, r6, lr}
 80019ca:	2600      	movs	r6, #0
 80019cc:	4d0c      	ldr	r5, [pc, #48]	; (8001a00 <__libc_init_array+0x38>)
 80019ce:	4c0d      	ldr	r4, [pc, #52]	; (8001a04 <__libc_init_array+0x3c>)
 80019d0:	1b64      	subs	r4, r4, r5
 80019d2:	10a4      	asrs	r4, r4, #2
 80019d4:	42a6      	cmp	r6, r4
 80019d6:	d109      	bne.n	80019ec <__libc_init_array+0x24>
 80019d8:	f000 f81a 	bl	8001a10 <_init>
 80019dc:	2600      	movs	r6, #0
 80019de:	4d0a      	ldr	r5, [pc, #40]	; (8001a08 <__libc_init_array+0x40>)
 80019e0:	4c0a      	ldr	r4, [pc, #40]	; (8001a0c <__libc_init_array+0x44>)
 80019e2:	1b64      	subs	r4, r4, r5
 80019e4:	10a4      	asrs	r4, r4, #2
 80019e6:	42a6      	cmp	r6, r4
 80019e8:	d105      	bne.n	80019f6 <__libc_init_array+0x2e>
 80019ea:	bd70      	pop	{r4, r5, r6, pc}
 80019ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80019f0:	4798      	blx	r3
 80019f2:	3601      	adds	r6, #1
 80019f4:	e7ee      	b.n	80019d4 <__libc_init_array+0xc>
 80019f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80019fa:	4798      	blx	r3
 80019fc:	3601      	adds	r6, #1
 80019fe:	e7f2      	b.n	80019e6 <__libc_init_array+0x1e>
 8001a00:	08001a74 	.word	0x08001a74
 8001a04:	08001a74 	.word	0x08001a74
 8001a08:	08001a74 	.word	0x08001a74
 8001a0c:	08001a78 	.word	0x08001a78

08001a10 <_init>:
 8001a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a12:	bf00      	nop
 8001a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a16:	bc08      	pop	{r3}
 8001a18:	469e      	mov	lr, r3
 8001a1a:	4770      	bx	lr

08001a1c <_fini>:
 8001a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a1e:	bf00      	nop
 8001a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a22:	bc08      	pop	{r3}
 8001a24:	469e      	mov	lr, r3
 8001a26:	4770      	bx	lr
